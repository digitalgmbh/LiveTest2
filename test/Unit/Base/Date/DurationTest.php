<?php
namespace Unit\Base\Date;

/**
 * Test class for File.
 * Generated by PHPUnit on 2011-02-18 at 17:42:36.
 */
use Base\Date\Duration;

class DurationTest extends \PHPUnit_Framework_TestCase
{
	public function testFormatResult( )
	{
		$formattedDuration = Duration::format( 59, '%d day(s), ', '%d hour(s), ', '%d minute(s), ', '%d second(s)' );
		$this->assertEquals('59 second(s)', $formattedDuration);

		$formattedDuration = Duration::format( 119, '%d day(s), ', '%d hour(s), ', '%d minute(s), ', '%d second(s)' );
		$this->assertEquals('1 minute(s), 59 second(s)', $formattedDuration);

		$formattedDuration = Duration::format( 3601, '%d day(s), ', '%d hour(s), ', '%d minute(s), ', '%d second(s)' );
		$this->assertEquals('1 hour(s), 0 minute(s), 1 second(s)', $formattedDuration);

		$formattedDuration = Duration::format( 86400, '%d day(s), ', '%d hour(s), ', '%d minute(s), ', '%d second(s)' );
		$this->assertEquals('1 day(s), 0 hour(s), 0 minute(s), 0 second(s)', $formattedDuration);

		$formattedDuration = Duration::format( 86401, '%d day(s), ', '%d hour(s), ', '%d minute(s), ', '%d second(s)' );
		$this->assertEquals('1 day(s), 0 hour(s), 0 minute(s), 1 second(s)', $formattedDuration);
	}

	public function testFormatParameters( )
	{
		$formattedDuration = Duration::format( 86401, '%d day(s)' );
		$this->assertEquals('1 day(s)', $formattedDuration);
	}
}